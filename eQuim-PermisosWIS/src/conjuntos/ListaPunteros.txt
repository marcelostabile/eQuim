package conjuntos;

import tdas.INodo;

public class ListaPunteros<T> implements IListaPunteros<T>{

    private INodo<T> primero = null;   
    private INodo<T> ultimo = null;    

    /**
     *  Este metodo getUltimo es orden constante : O(1)
     */
    @Override
    public INodo<T> getUltimo() {   
        return this.ultimo;     // O(1)
    }

    /**
     *  Este metodo getPrimero es orden constante : O(1)
     */
    @Override
    public INodo<T> getPrimero() {
        return this.primero;        // O(1)
    }

    /**
     *  Este metodo insertarPrimero es orden constante : O(1)
     */
    @Override
    public void insertarPrimero(INodo<T> nodo) {
        nodo.setSiguiente(this.primero);    // O(1) 
        this.primero = nodo;        // O(1)
    }

    /**
     *  Este metodo insertarUltimo es orden constante : O(1)
     */
    @Override
    public void insertarUltimo(INodo<T> nodo) {
        ultimo.setSiguiente(nodo);         // O(1)  
        ultimo = ultimo.getSiguiente();     // O(1) 
    }

    /**
     *  Este metodo buscar es orden lineal : O(N), siendo N el largo de la lista.
     */
    @Override
    public INodo<T> buscar(Comparable clave) {

        if (primero == null) {    // Lista vacia = retornamos nulo. // O(1)
            return null;       // O(1)

        }else{

            if(primero.compareTo(clave)==0){        // O(1)
                return primero;     // O(1)
            }

            if(ultimo.compareTo(clave)==0){     // O(1)
                return ultimo;      // O(1)
            }

            INodo<T> actual = primero;   // Hay elementos en la lista, tomamos el primero.      // O(1)
            while(actual != null) {    // Recorremos la lista hasta el último. Como recorre hasta el final O(N), ya que cambia el tiempo si cambia el tamaño de la lista
                if (clave.compareTo(actual.getEtiqueta()) == 0) {    // Comparamos la clave buscada con la clave del nodo actual, si coincide lo retornamos.    // O(1)
                    return actual;      // O(1)
                }
                actual = actual.getSiguiente();     // O(1)
            }
        }
        return null;    // Si no encontramos el nodo retornamos nulo.   // O(1)
    }

    /**
     *  Este metodo eliminar es orden lineal : O(N), siendo N el largo de la lista.
     */
    @Override
    public boolean eliminar(Comparable clave) {

        /* Caso: lista vacia */
        if (this.primero == null) { return false; } // O(1)

        /* Caso: elimino el primero */
        if (clave.compareTo(this.primero.getEtiqueta()) == 0) {    // Eliminamos el primero.    // O(1)
            this.primero = this.primero.getSiguiente(); // O(1)
            return true;        // O(1)
        }

        /* Caso: debo buscar en la lista */

        /*
        Hacemos referencia al nodo anterior y nodo actual.
        Recorremos la lista, si actual coincide con el buscado: a "siguiente" del nodo anterior le referenciamos el siguiente del nodo actual.
        Si actual no tiene "siguiente", quedará null el "siguiente" del nodo anterior, dejandolo en último lugar.
        */
        INodo<T> nodoAnterior = primero;        // O(1)
        INodo<T> actual = primero.getSiguiente();       // O(1)

        while (actual != null && clave.compareTo(actual.getEtiqueta()) != 0) {    // En el peor de los casos se recorre toda la lista para eliminar el ultimo nodo entonces el orden es lineal O(N) ya que cambia el tiempo si cambia el tamaño de la lista
            nodoAnterior = actual;      // O(1)
            actual = actual.getSiguiente();         // O(1)
        }
        if(actual != null){     // O(1)
            nodoAnterior.setSiguiente(actual.getSiguiente());       // O(1)
            if(nodoAnterior.getSiguiente() == null){        // O(1)
                ultimo = nodoAnterior;      // O(1)
            }
            return true;        // O(1)
        }
        return false;    // No se encontró el producto en la lista.     // O(1)
    }

    /**
     *  Este metodo imprimir es orden lineal : O(N), siendo N el largo de la lista.
     */
    @Override
    public String imprimir() {
        String impresion = "";      // O(1)
        if (primero!=null)      // O(1)
        {
            INodo<T> actual = primero;      // O(1)
            while (actual != null)      // O(N)
            {
                if(actual.getSiguiente()!=null){        // O(1)
                    impresion+=actual.getEtiqueta()+"\n";       // O(1)
                }
                else{
                    impresion+=actual.getEtiqueta();        // O(1)
                }
                actual = actual.getSiguiente();     // O(1)
            }
        }
        return impresion;       // O(1)
    }

    /**
     *  Este metodo imprimir es orden lineal : O(N), siendo N el largo de la lista.
     */
    @Override
    public String imprimir(String separador) {
        String impresion = "";      // O(1)
        if (primero!=null)         // O(1)
        {
            INodo<T> actual = primero;      // O(1)
            while (actual != null)      // O(N)
            {
                if(actual.getSiguiente()!=null){        // O(1)
                    impresion+=actual.getEtiqueta()+ separador;     // O(1)
                }
                else{
                    impresion+=actual.getEtiqueta();        // O(1)
                }
                actual = actual.getSiguiente();     // O(1)
            }
        }
        return impresion;       // O(1)
    }

    /**
     *  Este metodo vaciar es orden constante : O(1)
     */
    @Override
    public void vaciar() {
        primero = null;     // O(1)
        ultimo = null;      // O(1)
    }

    /**
     *  Este metodo cantElementos es orden lineal : O(N), siendo N el largo de la lista.
     */
    @Override
    public int cantElementos() {
        int contador = 0;      // O(1)

        INodo<T> actual = primero;     // Recorremos la lista y acumulamos el total de elementos en el contador.    // O(1)
        while (actual != null) {    // Recorres hasta el final de la lista en el peor de los casos por lo tanto es de orden O(N) ya que cambia el tiempo si cambia el tamaño de la lista.
            contador++;     // O(1)
            actual = actual.getSiguiente();     // O(1)
        }
        return contador;        // O(1)
    }

    /**
     *  Este metodo esVacia es orden constante : O(1)
     */
    @Override
    public boolean esVacia() {
        return primero == null;        // O(1)
    }
    
}
